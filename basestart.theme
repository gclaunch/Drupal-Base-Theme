<?php

/**
 * @file
 * Functions to support theming in the Basestart theme.
 */

use Drupal\Core\Template\Attribute;
use Drupal\Core\Link;
use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Xss;
use Drupal\node\Entity\Node;
use Drupal\Component\Render\MarkupInterface;


function basestart_preprocess(&$variables, $hook) {
  global $base_url;

  $variables['base_url'] = $base_url;
  $variables['url_path'] = \Drupal::request()->getRequestUri();
  $variables['theme_path'] = \Drupal::service('extension.list.theme')->getPath('basestart');

  // Page is front.
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  } catch (Exception $e) {
    $variables['is_front'] = FALSE;
  }

  // User has Admin access.
  try {
    $variables['is_admin'] = \Drupal::currentUser()->hasPermission('access administration pages');
  } catch (Exception $e) {
    $variables['is_admin'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function basestart_preprocess_html(&$variables) {
  if (!isset($variables['attributes']['class'])) {
    $variables['attributes']['class'] = [];
  }

  // Add information about sidebar.
  if (!empty($variables['page']['sidebar'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }

  // Scroll Spy info added to body.
  if ($scroll_spy = theme_get_setting('basestart_scroll_spy')) {
    $variables['attributes']['data-bs-target'] = $scroll_spy;
    $variables['attributes']['data-bs-spy'] = "scroll";
  }

  // Page specific info.
  $variables['path_info']['args'] = FALSE;
  $path = \Drupal::service('path.current')->getPath();
  $path = ltrim($path, '/');
  $path_args = explode('/', $path);
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'node') && (is_numeric($path_args[1]))) {
    $variables['attributes']['class'][] = 'page-node-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && ($path_args[0] == 'user')) {
    $variables['attributes']['class'][] = 'page-user-' . $path_args[1];
  }
  if (isset($path_args[0]) && isset($path_args[1]) && isset($path_args[2]) &&
    $path_args[0] == 'taxonomy' && $path_args[1] == 'term') {
    $variables['attributes']['class'][] = 'page-taxonomy-term-' . $path_args[2];
    $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($path_args[2]);
    if (!empty($term)) {
      $vocabulary_id = $term->bundle();
      $variables['attributes']['class'][] = 'page-vocabulary-' . Html::cleanCssIdentifier($vocabulary_id);
    }
  }
  $view_id = \Drupal::routeMatch()->getParameter('view_id');
  if ($view_id) {
    $variables['attributes']['class'][] = 'page-view-' . Html::cleanCssIdentifier($view_id);
  }

  // SEO Information.
  $http_equiv = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'x-ua-compatible',
      'content' => 'ie=edge',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$http_equiv, 'http-equiv'];

}

/**
 * Implements hook_page_attachments_alter() for page templates.
 */
function basestart_page_attachments_alter(&$page) {
  $viewport = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1, shrink-to-fit=no',
    ],
  ];
  $page['#attached']['html_head'][] = [$viewport, 'viewport'];
}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function basestart_preprocess_page(&$variables) {
  if (\Drupal::moduleHandler()->moduleExists('bootstrap_library')) {
    $library = theme_get_setting('basestart_library');
    switch ($library) {
      case 'cdn':
        $variables['#attached']['library'][] = 'bootstrap_library/bootstrap-cdn';
        break;

      case 'production':
        $variables['#attached']['library'][] = 'bootstrap_library/bootstrap';
        break;

      case 'development':
        $variables['#attached']['library'][] = 'bootstrap_library/bootstrap-dev';
        break;

    }
  }
  else {
    $source = theme_get_setting('basestart_source');
    if ($source) {
      $variables['#attached']['library'][] = $source;
    }
  }

  $img_fluid = theme_get_setting('basestart_image_fluid');
  if ($img_fluid) {
    $variables['#attached']['library'][] = 'basestart/image_fluid';
  }

  $flyout = theme_get_setting('basestart_navbar_flyout');
  if ($flyout) {
    $variables['#attached']['library'][] = 'basestart/navigation';
  }

  $slide = theme_get_setting('basestart_navbar_slide');
  if ($slide) {
    $variables['#attached']['library'][] = 'basestart/slide_nav';
  }

  switch (theme_get_setting('basestart_tabs_style')) {
    case 'full':
      $variables['#attached']['library'][] = 'basestart/tabs_full';
      break;
  }

  $fonts = theme_get_setting('basestart_google_fonts');
  if ($fonts) {
    $variables['#attached']['library'][] = 'basestart/' . $fonts;
  }

  $icons = theme_get_setting('basestart_bootstrap_icons');
  if ($icons) {
    $variables['#attached']['library'][] = 'basestart/bootstrap-icons';
  }

  $icons = theme_get_setting('basestart_icons');
  if ($icons) {
    $variables['#attached']['library'][] = 'basestart/' . $icons;
  }

  $system_messages = theme_get_setting('basestart_system_messages');
  if ($system_messages) {
    $variables['#attached']['library'][] = 'basestart/' . $system_messages;
  }

  $content_width = 'col';
  $sidebar_width = 'col-md-' . theme_get_setting('basestart_sidebar_width');

  // Define default classes for containers.
  $variables['navbar_top_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-top'],
  ];
  $variables['navbar_attributes'] = [
    'class' => ['navbar'],
    'id' => ['navbar-main'],
  ];
  $variables['content_attributes'] = [
    'class' => ['main-content', $content_width],
    'id' => ['content'],
    'role' => ['main'],
  ];
  $variables['sidebar_attributes'] = [
    'class' => ['sidebar', 'sidebar', $sidebar_width],
    'id' => ['sidebar'],
  ];
  
  // Get custom Navbar classes from config and add them to Navbars.
  if (theme_get_setting('basestart_navbar_top_class') !== NULL) {
    $variables['navbar_top_attributes']['class'][] = theme_get_setting('basestart_navbar_top_class');
  }
  if (theme_get_setting('basestart_navbar_class') !== NULL) {
    $variables['navbar_attributes']['class'][] = theme_get_setting('basestart_navbar_class');
  }

  switch (theme_get_setting('basestart_navbar_offcanvas')) {
    case 'offcanvas-collapse':
      $variables['navbar_offcanvas'] = TRUE;
      $variables['navbar_collapse_class'] = "offcanvas offcanvas-end";
      $variables['navbar_collapse_btn_data'] = "offcanvas";
      break;
    default:
      $variables['navbar _offcanvas'] = TRUE; 
      $variables['navbar_collapse_class'] = 'collapse navbar-collapse justify-content-end';
      $variables['navbar_collapse_btn_data'] = "collapse";
  }

  // Affix.
  $affix_navbar_top = theme_get_setting('basestart_navbar_top_affix');
  $affix_navbar = theme_get_setting('basestart_navbar_affix');
  $affix_sidebar = theme_get_setting('basestart_sidebar_affix');
  if ($affix_navbar_top || $affix_navbar || $affix_sidebar) {
    $variables['#attached']['library'][] = 'basestart/affix';
    if ($affix_navbar_top) {
      $variables['navbar_top_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_navbar) {
      $variables['navbar_attributes']['data-toggle'] = 'affix';
    }
    if ($affix_sidebar) {
      $variables['sidebar_attributes']['data-toggle'] = 'affix';
    }
  }

  // Calculate widths.
  if (theme_get_setting('basestart_content_offset')) {
    $variables['content_attributes']['class'][] = 'offset-md-' . theme_get_setting('basestart_content_offset');
  }
  if (theme_get_setting('basestart_sidebar_offset')) {
    $variables['sidebar_attributes']['class'][] = 'offset-md-' . theme_get_setting('basestart_sidebar_offset');
  }

  // Define column layout classes.
  switch (theme_get_setting('basestart_sidebar_position')) {
    case 'right':
      $variables['content_attributes']['class'][] = 'order-first';
      $variables['sidebar_attributes']['class'][] = 'order-last';
      break;
  }

  // Define navigation position.
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('basestart_navbar_top_position');
  $variables['navbar_attributes']['class'][] = theme_get_setting('basestart_navbar_position');

  // Define navigation color scheme.
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('basestart_navbar_top_color');
  $variables['navbar_attributes']['class'][] = theme_get_setting('basestart_navbar_color');

  // Define navigation background classes.
  $variables['navbar_top_attributes']['class'][] = theme_get_setting('basestart_navbar_top_background');
  $variables['navbar_attributes']['class'][] = theme_get_setting('basestart_navbar_background');

  // Define navigation toggle size.
  switch (theme_get_setting('basestart_navbar_toggle')) {
    case 'navbar-toggleable-xl':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-xl';
      break;

    case 'navbar-toggleable-lg':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-lg';
      break;

    case 'navbar-toggleable-md':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
      break;

    case 'navbar-toggleable-sm':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-sm';
      break;

    case 'navbar-toggleable-xs':
      $variables['navbar_attributes']['class'][] = 'navbar-expand-xs';
      break;

    case 'navbar-toggleable-all':
      $variables['navbar_attributes']['class'][] = '';
      break;

    default:
      $variables['navbar_attributes']['class'][] = 'navbar-expand-md';
      break;
  }

  if (theme_get_setting('basestart_sidebar_collapse')) {
    $variables['content_attributes']['class'][] = 'sidebar-offcanvas';
    $variables['sidebar_collapse'] = TRUE;
    $variables['#attached']['library'][] = 'basestart/sidebar_collapse';
  }

  // Declare region attributes.
  $variables['navbar_top_attributes'] = new Attribute($variables['navbar_top_attributes']);
  $variables['navbar_attributes'] = new Attribute($variables['navbar_attributes']);
  $variables['content_attributes'] = new Attribute($variables['content_attributes']);
  $variables['sidebar_attributes'] = new Attribute($variables['sidebar_attributes']);

  // Declare container layout.
  $variables['container_navbar'] = theme_get_setting('basestart_navbar_container');
  $variables['container'] = theme_get_setting('basestart_fluid_container') ? 'container-fluid' : 'container';

}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function basestart_preprocess_page_title(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="shortcut-wrapper clearfix">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }
}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function basestart_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'basestart/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function basestart_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }
  if (theme_get_setting('basestart_hide_node_label') != NULL) {
    unset($variables['label']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function basestart_preprocess_region(&$variables) {
  $nowrap = [
    'breadcrumb',
    'highlighted',
    'content',
    'primary_menu',
    'header',
    'sidebar',
  ];
  if (theme_get_setting('basestart_region_class_' . $variables['elements']['#region']) !== NULL) {
    $variables['attributes']['class'][] = theme_get_setting('basestart_region_class_' . $variables['elements']['#region']);
  }
  elseif (!in_array($variables['elements']['#region'], $nowrap)) {
    $variables['attributes']['class'][] = 'row';
  }

}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function basestart_preprocess_block(&$variables) {
  if ($variables['base_plugin_id'] == 'system_menu_block' && isset($variables['attributes']['id'])) {
    $variables['content']['#attributes']['id'] = $variables['attributes']['id'];
  }
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_preprocess_HOOK() for form elements.
 */
function basestart_preprocess_form_element(&$variables) {
  if (isset($variables['label']['#title'])) {
    if (is_object($variables['label']['#title']) && !$variables['label']['#title'] instanceof MarkupInterface) {
      $variables['input_title'] = NULL;
    }
    elseif (is_object($variables['label']['#title'])) {
      $variables['input_title'] = $variables['label']['#title'];
    }
    else {
      $variables['input_title'] = $variables['label']['#title'];
    }
  }
  if (isset($variables['element']['#attributes'])) {
    $variables['input_attributes'] = new Attribute($variables['element']['#attributes']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for form-element-label.html.twig.
 */
function basestart_preprocess_form_element_label(&$variables) {
  $element = $variables['element'];
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function basestart_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task.html.twig.
 */
function basestart_preprocess_menu_local_task(&$variables) {
  $link = $variables['element']['#link'];
  $url = $link['url'];
  $options = $url->getOptions();
  $url->setOptions($options + $link['localized_options']);
  $variables['item'] = Link::fromTextAndUrl($link['title'], $url);
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-tasks.html.twig.
 */
function basestart_preprocess_menu_local_tasks(&$variables) {
  switch (theme_get_setting('basestart_tabs_style')) {
    case 'pills':
      $variables['nav_style'] = 'nav-pills';
      break;
    default:
      $variables['nav_style'] = 'nav-tabs';
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function basestart_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Taken from http://kristiankaa.dk/article/drupal8-region-specific-menu-theme-hook-suggestion
  // basestart_preprocess_block(&$variables)
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(['block-', '-'], ['', '_'], $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-action.html.twig.
 */
function basestart_preprocess_menu_local_action(&$variables) {
  $link = $variables['element']['#link'];
  $link += [
    'localized_options' => [],
  ];
  $link['localized_options']['attributes']['class'][] = 'btn';
  $link['localized_options']['attributes']['class'][] = 'btn-secondary';
  $link['localized_options']['set_active_class'] = TRUE;
  $variables['link'] = [
    '#type' => 'link',
    '#title' => $link['title'],
    '#options' => $link['localized_options'],
    '#url' => $link['url'],
  ];
}

/**
 * Implements template_preprocess_table()
 */
function basestart_preprocess_table(&$variables) {
  $variables['table_class'] = theme_get_setting('basestart_table_style');
  $variables['hover'] = theme_get_setting('basestart_table_hover');
  $variables['thead_class'] = theme_get_setting('basestart_table_head');
}

/**
 * Implements template_preprocess_views_view_table()
 */
function basestart_preprocess_views_view_table(&$variables) {
  $variables['table_class'] = theme_get_setting('basestart_table_style');
  $variables['hover'] = theme_get_setting('basestart_table_hover');
  $variables['thead_class'] = theme_get_setting('basestart_table_head');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for region templates.
 */
function basestart_theme_suggestions_region_alter(array &$suggestions, array $variables) {
  $nowrap = [
    'breadcrumb',
    'highlighted',
    'content',
    'primary_menu',
    'header',
    'sidebar',
  ];
  if (theme_get_setting('basestart_region_clean_' . $variables['elements']['#region']) !== NULL) {
    $region_clean = theme_get_setting('basestart_region_clean_' . $variables['elements']['#region']);
  }
  else {
    $region_clean = in_array($variables['elements']['#region'], $nowrap);
  }
  if ($region_clean) {
    $suggestions[] = 'region__nowrap';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function basestart_theme_suggestions_user_alter(array &$suggestions, array $variables, $hook) {
  // Define the view mode.
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
  $user_id = \Drupal::service('current_user')->id();
  $suggestions[] = 'user__' . $sanitized_view_mode;
  $suggestions[] = 'user__' . $user_id;
  $suggestions[] = 'user__' . $user_id . '__' . $sanitized_view_mode;

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page template.
 */
function basestart_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add a template suggestions for node type.
  /** @var \Drupal\node\NodeInterface $node */
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (is_numeric($node)) {
      $node = Node::load($node);
    }

    $suggestions[] = 'page__node__' . $node->bundle();
  }
}

/**
 * Implements hook_theme_HOOK_form_alter() for node add/edit.
 */
function basestart_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['#theme'] = ['node_edit_form'];
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for links templates.
 */
function basestart_theme_suggestions_links_alter(array &$suggestions, array $variables) {
  // ToDo get from core a variable to flag inline links.
  if (isset($variables['attributes']['class'])) {
    if (in_array('inline', $variables['attributes']['class'])) {
      $suggestions[] = 'links__inline';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for status messages templates.
 */
function basestart_theme_suggestions_status_messages_alter(array &$suggestions, array $variables) {
  switch (theme_get_setting('basestart_messages_widget')) {
    case 'toasts':
      $suggestions[] = 'status_messages__toasts';
      break;

    case 'alerts':
      $suggestions[] = 'status_messages__alerts';
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for status_messages.
 */
function basestart_preprocess_status_messages(&$variables) {
  $variables['title_ids'] = [];
  if (is_array($variables['message_list'])) {
    foreach ($variables['message_list'] as $message_type => $messages) {
      $variables['title_ids'][$message_type] = Html::getUniqueId("message-$message_type-title");
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function basestart_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#form_id'] == 'search_block_form') {
    $suggestions[] = 'form__search_block_form';
  }
  if ($variables['element']['#form_id'] == 'node_form') {
    $suggestions[] = 'node_edit_form';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for form templates.
 */
function basestart_theme_suggestions_input_alter(array &$suggestions, array $variables) {
  if ($variables['element']['#type'] == 'submit' && theme_get_setting('basestart_button')) {
    $suggestions[] = 'input__submit_button';
  }
}

/**
 * Implements hook_preprocess_input() for adding classes to inputs.
 */
function basestart_preprocess_input(&$variables) {
  if (isset($variables['attributes']['class'])) {
    if (is_object($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('is-invalid');
      }
    }
    elseif (is_array($variables['attributes']['class'])) {
      if (in_array('error', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'is-invalid';
      }
    }
  }
  if ($variables['element']['#type'] == 'submit') {
    $button_size = theme_get_setting('basestart_button_size');
    $button_types = [
      'btn-primary',
      'btn-secondary',
      'btn-success',
      'btn-warning',
      'btn-danger',
      'btn-link',
    ];
    $button_sizes = ['btn-sm', 'btn-lg'];
    $button_is_outline = theme_get_setting('basestart_button_outline');
    if (is_object($variables['attributes']['class'])) {
      \Drupal::logger('basestart')->notice(implode($variables['attributes']['class']->value()));
      if (!in_array('btn', $variables['attributes']['class']->value())) {
        $variables['attributes']['class']->addClass('btn');
      }
      if (empty(array_intersect($button_types, $variables['attributes']['class']->value()))) {
        if ($button_is_outline) {
          $variables['attributes']['class']->addClass('btn-outline-primary');
        }
        else {
          $variables['attributes']['class']->addClass('btn-primary');
        }
      }
      if ($button_size && empty(array_intersect($button_sizes, $variables['attributes']['class']->value()))) {
        $variables['attributes']['class']->addClass($button_size);
      }
    }
    else {
      if (!in_array('btn', $variables['attributes']['class'])) {
        $variables['attributes']['class'][] = 'btn';
      }
      if (empty(array_intersect($button_types, $variables['attributes']['class']))) {
        if ($button_is_outline) {
          $variables['attributes']['class'][] = 'btn-outline-primary';
        }
        else {
          $variables['attributes']['class'][] = 'btn-primary';
        }
      }
      if ($button_size && empty(array_intersect($button_sizes, $variables['attributes']['class']))) {
        $variables['attributes']['class'][] = $button_size;
      }
      $variables['attributes'] = new Attribute($variables['attributes']);
    }
    $variables['safe_value_label'] = Xss::filter($variables['attributes']['value']);
  }
}

/**
 * Implements HOOK_preprocess_breadcrumb for breadcrumbs.
 */
function basestart_preprocess_breadcrumb(array &$variables) {
  if ($variables['breadcrumb']) {
    $request = \Drupal::request();
    $route_match = \Drupal::routeMatch();
    $page_title = \Drupal::service('title_resolver')->getTitle($request, $route_match->getRouteObject());

    if (!empty($page_title)) {
      $variables['breadcrumb'][] = [
        'text' => $page_title,
        'attributes' => new Attribute(['class' => ['active']]),
      ];
    }
    $variables['#cache']['contexts'][] = 'url';
  }
}